# Programming Language Resources

>The only way to learn a new programming language is by writing programs in it. - Dennis Ritchie

> What I cannot create, I do not understand. ‚Äî Richard Feynman

>Use it or lose it.

**Content**

- <a name="lang_c" href="#lang_t">Programming Languages</a>
- <a name="nonturinglang_c" href="#nonturinglang_t">Non-Turing-Complete Languages</a>
- <a name="cpl_c" href="#cpl_t">Characteristics of Programming Languages</a>
- <a name="pgmprd_c" href="#pgmprd_t">Programming Paradigms</a>
- <a name="mfp_c" href="#mfp_t">Metaphors for Programming</a>
- <a name="mfpl_c" href="#mfpl_t">Metaphors for Programming Languages</a>

<br>

<h2><a name="lang_t" href="#lang_c">Programming Languages</a></h2>

<br>

### Operating-System & Performance

#### <img src="/assets/icon/programming-languages/C.svg" width="20px"/>C

See [C Resources](../directions/c-resources.md)

#### <img src="/assets/icon/programming-languages/Cpp.svg" width="20px"/>C++

/cee plus plus/

See [C++ Resources](../directions/cpp-resources.md)

#### <img src="/assets/icon/programming-languages/Rust.svg" width="20px"/>Rust

/r åst/

See [Rust Resources](../directions/rust-resources.md)

### Infrastructure & Balanced

#### <img src="/assets/icon/programming-languages/Go.svg" width="20px"/>Go [üìà](https://www.tiobe.com/tiobe-index/go/)

See [Go Resources](../directions/go-resources.md)

### Application & Productivity

#### <img src="/assets/icon/programming-languages/Java.svg" width="20px"/>Java

/Ààd í…ëÀêv…ô/

See [Java Resources](../directions/java-resources.md)

#### <img src="/assets/icon/programming-languages/Kotlin.svg" width="20px"/>Kotlin üìà

/Ààk…ítl…™n/

- Documentation
  - [Kotlin Reference - doc]( https://kotlinlang.org/docs/reference/ )
- Online Tutorials
  - [Learn X in Y minutes - Kotlin](https://learnxinyminutes.com/docs/kotlin/)
  - [Kotlin Tutorial - W3Schools](https://www.w3schools.com/kotlin/)
  - [Kotlin Tutorial - Tutorialspoint](https://www.tutorialspoint.com/kotlin/)
- Kotlin in Action (2nd, 2024) by Dmitry Jemerov and Svetlana Isakova [4.4, 592]
- Head First Kotlin: A Brain-Friendly Guide (2019) by David Griffiths and Dawn Griffiths [4.28, 129]
- Fundamental Kotlin by Milo≈° Vasiƒá [4.23, 39]
- Kotlin from Scratch: A Project-Based Introduction for the Intrepid Programmer (2025) by Faisal Islam
- Kotlin Essentials (Kotlin for Developers) by Marcin Moska≈Ça

Advanced

- Java to Kotlin: A Refactoring Guidebook (2021) by Duncan McGregor [4.6, 33]
- Kotlin Design Patterns and Best Practices: Elevate your Kotlin skills with classical and modern design patterns, coroutines, and microservices (3rd, 2024) by Alexey Soshin
- Kotlin In-Depth: A Guide to a Multipurpose Programming Language for Server-Side, Front-End, Android, and Multiplatform Mobile (2022) by Aleksei Sedunov
- Kotlin Cookbook: A Problem-Focused Approach (2019) by Ken Kousen [4.0, 23]
- The Joy of Kotlin (2019) by Pierre Yves Saumont [3.72, 36]
- Software Architecture with Kotlin: Combine various architectural styles to create sustainable and scalable software solutions (2024) by Jason (Tsz Shun) Chow
- Functional Kotlin (Kotlin for Developers) by  Marcin Moska≈Ça
- Kotlin Coroutines: Deep Dive (Kotlin for Developers) by Marcin Moska≈Ça
- Advanced Kotlin (Kotlin for Developers) by Marcin Moskala
- Effective Kotlin: Best Practices (Kotlin for Developers) by Marcin Moskala

Kotlin for Android

- Kotlin for Android Developers by Antonio Leiva

Directions

>Kotlin is a modern, concise, and expressive programming language developed by JetBrains. It's best known for its first-class support for Android development, but it's also used in backend services, cross-platform mobile apps, and modern JVM-based applications.

| Field                   | Example Use Cases                                         |
| ----------------------- | --------------------------------------------------------- |
| Android Development     | Native Android apps with Jetpack, Compose, etc.           |
| Web Backends (JVM)      | REST APIs using Ktor, Spring Boot                         |
| Cross-Platform Mobile   | Shared codebase for Android/iOS with Kotlin Multiplatform |
| Enterprise Applications | JVM apps, refactoring legacy Java                         |
| Scripting & Dev Tools   | Build automation, Gradle scripts                          |
| Data Science (Emerging) | ML/AI experiments, Kotlin notebooks                       |

#### <img src="/assets/icon/programming-languages/C-sharp.png" width="20px"/>C#

/c sharp/

See [C# Resources](../directions/c-sharp-resources.md)

#### <img src="/assets/icon/programming-languages/Python.svg" width="20px"/>Python üìà

/Ààpa…™Œ∏…ëÀên/

See [Python Resources](../directions/python-resources.md)

#### <img src="/assets/icon/programming-languages/Ruby.svg" width="20px"/>Ruby üìâ

/ÀàruÀêbi/

See [Ruby Resources](../directions/ruby-resources.md)

#### <img src="/assets/icon/programming-languages/Php.svg" width="20px"/>PHP üìâ


See [PHP Resources](../directions/php-resources.md)

#### <img src="/assets/icon/frontend/Nodejs.svg" width="20px"/>Node.js (JavaScript)

See [Web Frontend Resources - Node.js](../directions/web-frontend-resources.md#nodejs)

### Client Application

#### <img src="/assets/icon/programming-languages/JavaScript.svg" width="20px"/>JavaScript üìà

See [Web Frontend Resources - JavaScript](../directions/web-frontend-resources.md#js_t)

#### <img src="/assets/icon/programming-languages/Android.svg" width="20px"/>Android

- [Android Documentation - doc](https://developer.android.com/docs)
- Android Programming: The Big Nerd Ranch Guide by Brian Hardy, Bill Phillips
- Head First Android Development: A Brain-Friendly Guide by DAVID GRIFFITHS and Dawn Griffiths
- The Busy Coder's Guide to Advanced Android Development by Mark Murphy
- Android Programming: Pushing the Limits by Erik Hellman
- Professional Android 4 Application Development by Reto Meier
- Learning Android by Marko Gargenta
- Programming Android: Java Programming for the New Generation of Mobile Devices by Zigurd Mednieks, Laird Dornin, G. Blake Meike, Masumi Nakamura

Android in Kotlin

- [Android Basics in Kotlin](https://developer.android.com/courses/android-basics-kotlin/course)

Android Studio

- [Android Studio User Guide](https://developer.android.com/studio/intro)


#### <img src="/assets/icon/programming-languages/Apple.svg" width="20px"/>Objective-C

- Documentation
  - [Programming with Objective-C - doc]( https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html )
  - [The Objective-C Programming Language - doc]( https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/ObjectiveC/Introduction/introObjectiveC.html )
  - [Apple Developer Documentation - doc]( https://developer.apple.com/documentation )
- Online Tutorials
  - [Learn X in Y minutes - Objective-C](https://learnxinyminutes.com/docs/objective-c/)
- **Programming in Objective-C** (2013) by Stephen G. Kochan [3.94, 513]
- **Objective-C Programming: The Big Nerd Ranch Guide** (Big Nerd Ranch Guides) (2nd, 2013) by Aaron Hillegass, Mikey Ward [4.17, 658]
- Effective Objective-C 2.0: 52 Specific Ways to Improve Your IOS and OS X Programs (2013) by Matt Galloway [4.55, 206]
- Learn Objective-C on the Mac (2nd, 2012) by Mark Dalrymple, Scott Knaster [3.93, 133]
- Ry's Objective-C Tutorial (2014) by Ryan Hodson

Some more

- Pro Objective-C (2013) by Keith Lee [3.97, 33]
- Pro Objective-C Design Patterns for iOS (2011) by Carlo Chung [3.97, 33]
- Objective-C for Absolute Beginners: iPhone, iPad and Mac Programming Made Easy (2018) by Stefan Kaczmarek, Brad Lees [3.49, 47]
- Objective-C Pocket Reference: A Guide to Language Fundamentals (2009) by Andrew M. Duncan [3.52, 52]
- Learn Objective-C for Java Developers (2009) by James Bucanek [3.64, 22]
- Objective-C Programming For Dummies (2012) by Neal Goldstein 
- Objective-C Memory Management Essentials (2015) by Gibson Tang
- Sams Teach Yourself Objective-C in 24 Hours (2014) by Jesse Feiler 
- Objective-C Fundamentals (2011) by Collin Ruffenach, Johannes Fahrenkrug 
- Advanced Programming in Objective-C (2014) by Stephen G. Kochan, Lee McKeeman

Cocoa

- [Cocoa Fundamentals Guide](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaFundamentals/Introduction/Introduction.html)
- Cocoa Design Patterns (2009) by Erik Buck and Donald Yacktman [4.01, 146]
- Learning Cocoa with Objective-C: Developing for the Mac and IOS App Stores (4th, 2014) by Jon Manning and Paris Buttfield-Addison [3.43, 51]
- Cocoa and Objective-C: Up and Running: Foundations of Mac, iPhone, and iPad Programming (2010) by Scott Stevenson [3.50, 40]
- Ry's Cocoa Tutorial (2014) by Ryan Hodson
- Cocoa Programming Developer's Handbook (2009) by David Chisnall
- Nshipster: Obscure Topics in Cocoa & Objective C (2013) by Mattt Thompson 
- Cocoa Programming: A Quick-Start Guide for Developers (2010) by Daniel H. Steinberg
- Cocoa in a Nutshell: A Desktop Quick Reference (2010) by James Duncan Davidson and Michael Beam

AppKit

>AppKit is a framework within Cocoa.

- [AppKit Documentation](https://developer.apple.com/documentation/appkit/)


#### <img src="/assets/icon/programming-languages/Swift.svg" width="20px"/>Swift

- Documentation
  - [Swift Documentation - doc]( https://swift.org/documentation/ )
- Online Tutorials
  - [Learn X in Y minutes - Swift](https://learnxinyminutes.com/docs/swift/)
  - [Swift Tutorial - Tutorialspoint](https://www.tutorialspoint.com/swift/)
  - [100 Days of Swift](https://www.hackingwithswift.com/100)
  - [Hacking with Swift](https://www.hackingwithswift.com/)
- **The Swift Programming Language** (2014) by Apple Inc. [4.15, 477]
- **Swift Programming: The Big Nerd Ranch Guide** (Big Nerd Ranch Guides) (6th, 2020) by Mikey Ward [4.21, 214]
- Swift in Depth (2018) by Tjeerd in 't Veen [4.58, 31]
- Swift 5 for Absolute Beginners: Learn to Develop Apps for iOS by Stefan Kaczmarek, Brad Lees, Gary Bennett
- Learning Swift: Building Apps for macOS, iOS, and Beyond (3rd, 2018) by Jonathon Manning
- Swift Cookbook: Proven recipes for developing robust iOS applications with Swift 5.9 (3rd, 2024) by Keith Moon, Chris Barker, Daniel Bolella, Nathan Lawlor
- Head First Swift: A Learner's Guide to Programming with Swift (2021) by Paris Buttfield-Addison, Jon Manning
- Practical Artificial Intelligence with Swift: From Fundamental Theory to Development of AI-Driven Apps (2019) by Mars Geldard, Jonathon Manning, Paris Buttfield-Addison
- Mastering Swift 6: Build high-performance applications with ease using the latest features of Swift 6.2 (7th, 2025) by Jon Hoffman
- Mastering Swift 5.3: Upgrade your knowledge and become an expert in the latest version of the Swift programming language (6th, 2020) by Jon Hoffman
- iOS 11 Swift Programming Cookbook: Solutions and Examples for iOS Apps (2017) by Vandad Nahavandipoor 
- Swift Development with Cocoa: Developing for the Mac and iOS App Stores (2014) by Jonathon Manning , Paris Buttfield-Addison 

SwiftUI

- [SwiftUI Tutorials](https://developer.apple.com/tutorials/swiftui)
- [100 Days of SwiftUI](https://www.hackingwithswift.com/100/swiftui)
- SwiftUI Cookbook: A guide for building beautiful and interactive SwiftUI apps (3rd, 2023) by Juan C. Catalan
- SwiftUI for Masterminds: How to take advantage of Swift and SwiftUI to create insanely great apps for iPhones, iPads, and Macs (5th, 2024) by J.D Gauchat
- Animating SwiftUI Applications: Create visually stunning and engaging animations for iOS with SwiftUI (2023) by Stephen DeStefano
- Elevate SwiftUI Skills by Building Projects: Build four modern applications using Swift, Xcode 14, and SwiftUI for iPhone, iPad, Mac, and Apple Watch (2023) by Frahaan Hussain
- An iOS Developer's Guide to SwiftUI: Design and build beautiful apps quickly and easily with minimum code (2024) by Michele Fadda

UIKit

- [UIKit Documentation](https://developer.apple.com/documentation/uikit). Construct and manage a graphical, event-driven user interface for your iOS, iPadOS, or tvOS app.
- UIKit for Masterminds: How to take advantage of Swift and UIKit to create insanely great apps for iPhones, iPads, and Macs (2021) by J.D Gauchat

#### iOS & iPad & macOS Programming

General

- Apple macOS and iOS System Administration: Integrating and Supporting iPhones, iPads, and MacBooks (2020) by Drew Smith
- Head First iPhone and iPad Development: A Learner's Guide to Creating Objective-C Applications for the iPhone and iPad (2014) by Dan Pilone and Tracey Pilone [3.78, 120]
- iOS and macOS Performance Tuning: Cocoa, Cocoa Touch, Objective-C, and Swift (2017) by Marcel Weiher 
- Mac OS X and iOS Internals: To the Apple's Core (2012) by Jonathan Levin
- Learn Xcode Tools for Mac OS X and iPhone Development (2009) by Ian Piper 
- Pro Multithreading and Memory Management for iOS and OS X: with ARC, Grand Central Dispatch, and Blocks (2012) by Kazuki Sakamoto, Tomohiko Furumoto

iOS Programming

- **iPhone Programming** (2010) by Joe Conway, Aaron Hillegass [4.19, 947]
- Building iPhone Apps with HTML, CSS, and JavaScript: Making App Store Apps Without Objective-C or Cocoa (2010) by Jonathan Stark [3.94, 180]
- Head First iPhone Development 1st Edition, Kindle Edition (2011) by Dan Pilone, Tracey Pilone [3.8, 120]
- **iOS Programming: The Big Nerd Ranch Guide** (7th, 2020) by Christian Keur [4.23, 107]
- Pro iPhone Development with SwiftUI: Design and Manage Top-Quality Apps (4th, 2023) by Wallace Wang
- Beginning iPhone Development with SwiftUI: Exploring the iOS SDK (7th, 2023) by Wallace Wang 
- Pro Objective-C Design Patterns for iOS (2011) by Carlo Chung
- [iOS Example](https://iosexample.com/)
- Matt Neuburg 
	- iOS 15 Programming Fundamentals with Swift: Swift, Xcode, and Cocoa Basics (2021) by Matt Neuburg
	- Programming iOS 14: Dive Deep into Views, View Controllers, and Frameworks (2020) by Matt Neuburg 
- iOS 18
	- Mastering iOS 18 Development: Take your iOS development experience to the next level with iOS, Xcode, Swift, and SwiftUI (2024) by Avi Tsadok
	- iOS 18 Programming for Beginners: Learn iOS development with Swift 6, Xcode 16, and iOS 18 - your path to App Store success (9th, 2024) by Ahmad Sahar
	- Beginning iOS 18 Programming with Swift and UIKit: Learn UIKit and Swift by Building a Real World iOS App. Fully supports Xcode 16, Swift 6, and iOS 18 (2024) by Simon Ng
- iOS 12
	- IOS 12 Programming for Beginners: An Introductory Guide to IOS App Development with Swift 4.2 and Xcode 10 (3rd, 2018) by Craig Clayton
	- Swift Programming in easy steps: Develop iOS apps - covers iOS 12 and Swift 5 (2019) by Darryl Bartlett
- The Ultimate iOS Interview Playbook: Conquer Swift, frameworks, design patterns, and app architecture for your dream job (2023) by Avi Tsadok
- iOS Development at Scale: App Architecture and Design Patterns for Mobile Engineers (2023) by Eric Vennaro
- iOS Unit Testing by Example: XCTest Tips and Techniques Using Swift (2020) by Jon Reid [4.48, 42]

iOS Courses

- [CS193p - Developing Apps for iOS](https://cs193p.sites.stanford.edu/) by Stanford University
- [Kodeco](https://www.kodeco.com/). Learn iOS, Android & Flutter.

iOS Resources

- [trip-to-iOS](https://github.com/Aufree/trip-to-iOS). iOS Â≠¶‰π†ËµÑÊñôÊï¥ÁêÜ

Mac OS X Programming

- Cocoa Programming for Mac OS X (3rd, 2008) by Aaron Hillegass [3.97, 574]
- macOS Programming for Absolute Beginners: Developing Apps Using Swift and Xcode (2017) by Wallace Wang 
- macOS App Development: The SwiftUI Way (2024) by Grace Huang
- Interprocess Communication with macOS: Apple IPC Methods (2021) by Hem Dutt
- Mastering macOS Programming: Hands-on guide to macOS Sierra Application Development (2017) by Stuart Grimshaw 
- Exploring macOS: A Journey Through the Mac Ecosystem (2023) by Sagar Rastogi and Jasdeep Singh
- The macOS User Administration Guide: A practical guide to implementing, managing, and optimizing macOS Big Sur features and tools (2021) by Herta Nava 
- Mac OS X For Unix Geeks: Demistifying the Geekier Side of Mac OS X (2008) by Ernest E. Rothman , Brian Jepson
- MAC OS X Internals: A Systems Approach (2006) by Amit Singh 

Command Line & Terminal

- The macOS Command Line and Terminal Handbook: A Comprehensive Guide to Zsh and Scripting for Beginners Through Advanced Users (2025) by John Curlee
- Tweak Your Mac Terminal: Command Line macOS (2020) by Daniel Platt
- Learning Unix for OS X: Going Deep With the Terminal and Shell (2nd, 2016) by Dave Taylor 
- Macintosh Terminal Pocket Guide: Take Command of Your Mac (2012) by Daniel J. Barrett
- The Mac OS X Command Line: Unix Under the Hood (2005) by Kirk McElhearn
- The macOS Command Line and Terminal Handbook: A Comprehensive Guide to Zsh and Scripting for Beginners Through Advanced Users (2025) by John N Curlee

AppleScript

- Learn AppleScript: The Comprehensive Guide to Scripting and Automation on Mac OS X (3rd, 2010) by Hamish Sanderson , Hanaan Rosenthal
- AppleScript: The Definitive Guide (2nd, 2006) by Matt Neuburg
- Apple Training Series: AppleScript 1-2-3 (2009) by Sal Soghoian, Bill Cheeseman
- AppleScript in a Nutshell: A Desktop Quick Reference (2001) by Bruce W. Perry

Flutter

#### <img src="/assets/icon/programming-languages/Delphi.svg" width="20px"/>Delphi

>Delphi is a high-level, compiled, object-oriented programming language and software development environment, based on the Object Pascal language.

>Delphi is primarily used in desktop application development.

- [Delphi](https://www.embarcadero.com/products/delphi). Native Apps For Any Device From One Codebase With Delphi! Build Apps 5x Faster for Windows, Android, iOS, macOS, and Linux.

#### <img src="/assets/icon/programming-languages/Windows.svg" width="20px"/>Windows Desktop Applications

- `C#` + [Windows Forms](https://learn.microsoft.com/en-us/dotnet/desktop/winforms/) or [WPF (Windows Presentation Foundation)](https://learn.microsoft.com/en-us/dotnet/desktop/wpf/)
- `C++` + [Win32 API](https://learn.microsoft.com/en-us/windows/win32/api/)„ÄÅ[MFC](https://learn.microsoft.com/en-us/cpp/mfc/mfc-desktop-applications) or Qt
- [Visual Basic .NET](https://learn.microsoft.com/en-us/dotnet/visual-basic/)

#### <img src="/assets/icon/programming-languages/Linux.svg" width="20px"/>Linux Desktop Applications

- C/C++
  - GTK+
  - Qt
- Python
  - GTK+
  - PyQt/PySide
  - Tkinter

#### Browser Plugins or Extensions

Google Chrome

- [Chrome Extensions - chrome for developers](https://developer.chrome.com/docs/extensions)
- [Chrome Extensions samples](https://github.com/GoogleChrome/chrome-extensions-samples)

#### Cross-Platform Applications

**One codebase for all platforms** (web, mobile, desktop)

- JavaScript/TypeScript
	- [React Native](https://reactnative.dev/) (2015) by Meta
	- [Tauri](https://tauri.app/) (2020)
	- [Ionic](https://ionicframework.com/) (2013)
	- [Progressive Web Apps (PWA)](https://web.dev/explore/progressive-web-apps) (2016) by Google
	- [Apache Cordova](https://cordova.apache.org/) / PhoneGap (2009)
	- [Quasar Framework](https://quasar.dev/) (2015)
- Dart
	- [Flutter](https://flutter.dev/) (2017) by Google
- C#
	- [Xamarin](https://dotnet.microsoft.com/en-us/apps/xamarin) (2011)
	- [Unity](https://unity.com/) (2005)
	- [.NET MAUI](https://dotnet.microsoft.com/en-us/apps/maui) (Multi-platform App UI) (2022) by Microsoft
	- [Avalonia](https://avaloniaui.net/) (2013)
- Java
	- [JavaFX](https://openjfx.io/) (2008) by Oracle
- Kotlin
	- [Kotlin Multiplatform](https://kotlinlang.org/docs/multiplatform.html) (2023) by JetBrains
- C++
	- [Qt](https://www.qt.io/) (1995)
- Python
	- [Qt](https://www.qt.io/) (1995)

**Mobile cross-platform** (Android, iOS)

- Ruby
	- [RubyMotion](http://www.rubymotion.com/) (2012)
- JavaScript/TypeScript
	- [NativeScript](https://nativescript.org/) (2014)

**Desktop cross-platform** (Windows, macOS, and Linux)

- JavaScript/TypeScript
	- [Electron](https://electronjs.org/) (2013)
- Java
	- [Swing](https://docs.oracle.com/javase/tutorial/uiswing/index.html) by Oracle
- GTK ([C++, Go, Python, Rust and more](https://www.gtk.org/docs/language-bindings/))

### Glue & Convenience

>Python, JavaScript, Ruby, Perl, Bash, Groovy, PHP, Lua, F# and Clojure.

#### <img src="/assets/icon/programming-languages/Perl.svg" width="20px"/>Perl

/p…úÀê(r)l/

- [Perl 5.30.0 documentation]( https://perldoc.perl.org/ )
- [Perl Docs]( https://www.perl.org/docs.html )
- Learning Perl by Randal L. Schwartz
- Beginning Perl by Curtis 'Ovid' Poe
- Programming Perl by Tom Christiansen
- Perl Cookbook by Tom Christiansen, Nathan Torkington
- Modern Perl by chromatic
- Intermediate Perl by Randal L. Schwartz, Brian D. Foy, Tom Phoenix
- Perl Best Practices: Standards and Styles for Developing Maintainable Code by Damian Conway
- Mastering Perl by Brian D. Foy
- Higher-Order Perl: Transforming Programs with Programs by Mark Jason Dominus
- Object Oriented Perl: A Comprehensive Guide to Concepts and Programming Techniques by Damian Conway, Randal L. Schwartz

Directions

>Perl is a versatile scripting language traditionally used in text processing, system administration, and rapid prototyping. It has a rich history and is valued for its powerful regular expressions and flexibility, though its popularity has waned with newer languages emerging.

| Field                    | Example Use Cases                    |
| ------------------------ | ------------------------------------ |
| System Administration    | Automation scripts, log analysis     |
| Text Processing          | Data extraction, report generation   |
| Web Development (Legacy) | CGI scripts, form handlers           |
| Bioinformatics           | Sequence analysis, data parsing      |
| Network Programming      | Network tools, security scripts      |
| Rapid Prototyping        | Algorithm tests, integration scripts |

#### <img src="/assets/icon/programming-languages/Groovy.svg" width="20px"/>Groovy

/Àà…°ruÀêvi/

- Documentation
  - [Groovy Documentation - doc]( https://groovy-lang.org/documentation.html )
- Online Tutorials
  - [Learn X in Y minutes - Groovy](https://learnxinyminutes.com/docs/groovy/)
  - [Groovy Tutorial - Tutorialspoint](https://www.tutorialspoint.com/groovy/)
  - [Refcard Groovy A Rapid-Development JVM Language - DZone](https://dzone.com/refcardz/groovy). a cheat sheet.
- Groovy in Action (2nd, 2015) by Dierk K√∂nig, Andrew Glover, Paul King, Guillaume Laforge, Jon Skeet, James Gosling
- Programming Groovy 2: Dynamic Productivity for the Java Developer (2018) by Venkat Subramaniam
- Making Java Groovy (2013) by Kenneth A. Kousen
- Groovy 2 Cookbook (2013) by Andrey Adamovich and Luciano Fiandesio
- Learning Groovy 3: Java-Based Dynamic Scripting (2019) by Adam L. Davis
- Groovy Recipes: Greasing the Wheels of Java (2018) by Scott Davis 

Grails

- Grails in Action by Glen Smith, Peter Ledbrook
- The definitive guide to Grails by Graeme Keith Rocher

Directions

>Groovy is a dynamic, optionally-typed language for the JVM (Java Virtual Machine), designed to be concise, expressive, and fully interoperable with Java. It‚Äôs widely used in automation, build scripting, and web development, especially where Java ecosystems are involved.

| Field              | Example Use Cases                          |
| ------------------ | ------------------------------------------ |
| Build Automation   | Gradle build scripts                       |
| CI/CD Pipelines    | Jenkins pipeline scripting                 |
| Web Development    | Grails web apps, RESTful services          |
| Testing            | Spock testing framework                    |
| Embedded Scripting | Runtime scripting within Java applications |

#### <img src="/assets/icon/programming-languages/Lua.svg" width="20px"/>Lua

/Loo-uh/

- Documentation
  - [Lua Documentation - doc]( https://www.lua.org/docs.html )
- Online Tutorials
  - [Learn X in Y minutes - Lua](https://learnxinyminutes.com/docs/lua/)
  - [Lua Tutorial - Tutorialspoint](https://www.tutorialspoint.com/lua/)
- Programming in Lua by Roberto Ierusalimschy
- Lua Programming Gems by Luiz Henrique de Figueiredo, Waldemar Celes, Roberto Ierusalimschy
- Beginning Lua programming by Kurt Jung
- Lua Quick Start Guide: The Easiest Way to Learn Lua Programming by Gabor Szauer
- Lua 5.2 Reference Manual by Luiz Henrique de Figueiredo, Roberto Ierusalimschy, and Waldemar Celes

Directions

>Lua is a lightweight, fast, and embeddable scripting language primarily used for game development, embedded systems, and extensible applications where scripting capabilities need to be integrated seamlessly.

| Field                     | Example Use Cases                          |
| ------------------------- | ------------------------------------------ |
| Game Development          | Game scripting, AI, UI, modding            |
| Embedded Systems & IoT    | Firmware scripting, lightweight automation |
| Application Extensibility | Plugins and scripting in apps              |
| Networking & Web Servers  | OpenResty web server scripting             |

### Minority programming languages

#### <img src="/assets/icon/programming-languages/Clojure.svg" width="20px"/>Clojure

- [Clojure Documentation](https://clojure.org/guides/getting_started)
- Clojure for the Brave and True: Learn the Ultimate Language and Become a Better Programmer (2015) by Daniel Higginbotham
- Programming Clojure (3rd, 2018) by Alex Miller, Stuart Halloway, Aaron Bedra
- Getting Clojure: Build Your Functional Skills One Idea at a Time (2018) by Russ Olsen
- The Joy of Clojure (2nd, 2014) by Michael Fogus, Chris Houser
- Living Clojure: An Introduction and Training Plan for Developers (2015) by Carin Meier
- Elements of Clojure (2019) by Zachary Tellman
- Clojure Programming: Practical Lisp for the Java World (2012) by Chas Emerick, Christophe Grand, Brian Carper
- Clojure Applied: From Practice to Practitioner (2015) by Ben Vandgrift, Alex Miller
- Mastering Clojure Macros: Write Cleaner, Faster, Smarter Code (2014) by Colin Jones
- Clojure in Action (2nd, 2016) by Amit Rathore, Francis Avila

Web Development

- Web Development with Clojure (3rd, 2021) by Dmitri Sotnikov and Scot Brown
- Clojure Web Development Essentials (2015) by Ryan Baldwin

Web Frameworks

> The majority of web development in Clojure is done with a collection of libraries chosen by the development team, depending on their preferences and their needs, rather than frameworks.

- [Luminus](https://luminusweb.com/) - micro-framework
- Coast
- Biff

Dependency Management

- [Leiningen](https://leiningen.org/)

Directions

>Clojure is a modern, functional programming language that runs on the JVM (Java Virtual Machine). It‚Äôs designed for concurrent, immutable, and expressive programming. Clojure is popular in fields where robust data processing, concurrency, and functional programming paradigms are valued.

| Field                            | Example Use Cases                         |
| -------------------------------- | ----------------------------------------- |
| Data Processing & Analytics      | ETL pipelines, real-time data apps        |
| Web Development                  | Web services, APIs, microservices         |
| Concurrent Systems               | Parallel computing, STM-based concurrency |
| AI & Machine Learning (Emerging) | Experimental AI, JVM ML integrations      |
| Scripting & Automation           | Functional scripting, DSLs                |

#### <img src="/assets/icon/programming-languages/F-sharp.png" width="20px"/>F#

- [F# documentation](https://fsharp.org/learn/)
- F# in Action (2024) by Isaac Abraham
- Domain Modeling Made Functional: Tackle Software Complexity with Domain-Driven Design and F# (2018) by Scott Wlaschin
- Stylish F# 6: Crafting Elegant Functional Code for .NET 6 (2nd, 2021) by Kit Eason
- Get Programming with F#: A guide for .NET developers (2018) by Isaac Abraham
- Real-World Functional Programming: With Examples in F# and C# (2010) by Tomas Petricek, Jon Skeet
- The Book of F#: Breaking Free With Managed Functional Programming (2014) by Dave Fancher


### Big Data Field

#### <img src="/assets/icon/programming-languages/Scala.svg" width="20px"/>Scala

- Documentation
  - [Scala Documentation - doc]( https://docs.scala-lang.org/ )
- Online Tutorials
  - [Learn X in Y minutes - Scala](https://learnxinyminutes.com/docs/scala/)
  - [Scala Tutorial - Tutorialspoint](https://www.tutorialspoint.com/scala/)
  - [Learn Scala](https://www.learnscala.org/)
- Programming in Scala by Bill Venners and Martin Odersky
- Functional Programming in Scala by Paul Chiusano and R√∫nar Bjarnason
- Scala for the Impatient by Cay S. Horstmann
- Scala in Depth by Joshua D. Suereth
- Scala Cookbook: Recipes for Object-Oriented and Functional Programming by Alvin Alexander
- Programming Scala: Scalability = Functional Programming + Objects by Alex Payne and Dean Wampler
- Scala in Action by Nilanjan Raychaudhuri
- Functional Programming, Simplified: (Scala Edition) by Alvin Alexander
- Learning Scala: Practical Functional Programming for the JVM by Jason Swartz
- Scala Puzzlers by Andrew Phillips and Nermin Serifovic

Directions

>Scala is widely used in fields that require scalable, high-performance applications, especially those that benefit from both object-oriented and functional programming paradigms. It‚Äôs popular for building big data systems, distributed applications, and backend services.

| Field                          | Example Use Cases                         |
| ------------------------------ | ----------------------------------------- |
| Big Data & Distributed Systems | Apache Spark, Kafka pipelines             |
| Web Development                | Play Framework, Akka HTTP, microservices  |
| Concurrent Programming         | Actor-based systems, reactive programming |
| Data Science & ML              | JVM-based ML workflows                    |
| General Software Dev           | Server apps, DSLs                         |

### Real-time systems

#### <img src="/assets/icon/programming-languages/Erlang.svg" width="20px"/>Erlang

>Erlang is primarily used in fields that require highly reliable, concurrent, and distributed systems, especially where fault tolerance and real-time performance are critical.

- [Erlang GETTING STARTED - doc](https://www.erlang.org/)

### Statistical analysis

#### <img src="/assets/icon/programming-languages/R.svg" width="20px"/>R

>R is primarily used in fields that require statistical analysis, data visualization, and data science. It is widely adopted by statisticians, data scientists, and researchers for handling complex data and creating insights.

- [R Getting Started - doc](https://www.r-project.org/)

### Industrial field

#### <img src="/assets/icon/programming-languages/VisualBasic.svg" width="20px"/>Visual Basic

>Visual Basic (VB) ‚Äî especially Visual Basic for Applications (VBA) and Visual Basic .NET (VB.NET) ‚Äî is primarily used in business software development, office automation, and internal enterprise tools, particularly within Windows environments.

- [Visual Basic language reference](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/visual-basic-language-reference)

### Banking and financial services

#### <img src="/assets/icon/programming-languages/Cobol.svg" width="20px"/>COBOL

>COBOL (Common Business-Oriented Language) is primarily used in the field of business, finance, and administrative systems‚Äîespecially those that require high-volume data processing and long-term reliability.

- [COBOL](https://developer.ibm.com/languages/cobol/). Run mission-critical processes on the modern mainframe with this business-oriented language that enterprises and developers continue to rely on.

### Academic research and education

#### <img src="/assets/icon/programming-languages/Fortran.svg" width="20px"/>Fortran

>Fortran (short for Formula Translation) is primarily used in fields that require high-performance numerical computing, especially those involving scientific, engineering, and mathematical computations.

- [Fortran](https://fortran-lang.org/). High-performance parallel programming language.

#### <img src="/assets/icon/programming-languages/Matlab.svg" width="20px"/>MATLAB

>MATLAB is widely used in fields that require mathematical modeling, data analysis, simulation, and algorithm development. It‚Äôs especially popular in engineering, science, and academia, as well as in industry applications that demand prototyping and high-performance computation.

- [MATLAB](https://www.mathworks.com/products/matlab.html). A programming and numeric computing platform used by millions of engineers and scientists to analyze data, develop algorithms, and create models.

#### <img src="/assets/icon/programming-languages/Lisp.svg" width="20px"/>Lisp

>Lisp (short for LISt Processing) is primarily used in fields that value symbolic computation, AI research, and metaprogramming. It‚Äôs one of the oldest high-level programming languages, known for its powerful macro system, code-as-data philosophy, and flexibility.

>Â±†Èæô‰πãÊäÄÂéâÂÆ≥ÔºåÂ•à‰ΩïÈæôÂ∞ë„ÄÇ

- Documentation
  - [Common-Lisp Documentation - doc]( https://common-lisp.net/documentation )
- Practical Common Lisp by Peter Seibel
- Paradigms of AI Programming: Case Studies in Common Lisp by Peter Norvig
- Common LISP: A Gentle Introduction to Symbolic Computation by David S. Touretzky
- Structure and Interpretation of Computer Programs by Gerald Jay Sussman and Hal Abelson
- On Lisp by Paul Graham
- Land of Lisp: Learn to Program in Lisp, One Game at a Time! by Conrad Barski
- Common Lisp the Language by Guy L. Steele Jr.
- ANSI Common Lisp by Paul Graham
- The Little Schemer by Daniel P. Friedman and Matthias Felleisen

#### <img src="/assets/icon/programming-languages/Haskell.svg" width="20px"/>Haskell

>Haskell is primarily used in fields that require strong correctness guarantees, complex algorithmic logic, or robust concurrency ‚Äî especially in academia, research, finance, and advanced software tooling. It's a purely functional programming language known for type safety, immutability, and mathematical elegance.

- [Haskell Documentation - doc]( https://www.haskell.org/documentation/ )
- Learn You a Haskell for Great Good!: A Beginner's Guide by Miran Lipovaƒça [HTML](https://learnyouahaskell.github.io/chapters.html)
- Real World Haskell: Code You Can Believe In by Bryan O'Sullivan [HTML](https://book.realworldhaskell.org/read/)
- Learn Haskell by building a blog generator by Gil Mizrahi [HTML](https://learn-haskell.blog/)
- Programming in Haskell by Graham Hutton
- Haskell Programming From First Principles by Christopher Allen, Julie Moronuki
- Get Programming with Haskell by Will Kurt
- Thinking Functionally with Haskell by Richard S. Bird
- Haskell: The Craft of Functional Programming by Simon Thompson

Advanced

- Developing Web Apps with Haskell and Yesod: Safety-Driven Web Development (2nd, 2015) by Michael Snoyman [HTML](https://www.yesodweb.com/book)
- Parallel and Concurrent Programming in Haskell: Techniques for Multicore and Multithreaded Programming by Simon Marlow
- Functional Design and Architecture: Examples in Haskell (2024) by Alexander Granin
- Haskell in Depth (2021) by Vitaly Bragilevsky
- Practical Haskell: A Real-World Guide to Functional Programming (2022) by Alejandro Serrano Mena
- Production Haskell: Succeeding in Industry with Haskell (2023) by Matt Parsons

Web Frameworks

- Full Stack
	- [Yesod](https://www.yesodweb.com/)
- API
	- [Servant](https://www.servant.dev/)

Tools

- IDE: Visual Studio Code, IntelliJ IDEA with Haskell plugin
- Package Management: [Cabal](https://www.haskell.org/cabal/)

#### <img src="/assets/icon/programming-languages/Scratch.svg" width="20px"/>Scratch

>Scratch is primarily used in the field of education, especially for teaching programming and computational thinking to children and beginners.

- [Scratch](https://scratch.mit.edu/). Create stories, games, and animations. Share with others around the world.

### Others

#### Julia

- [Julia 1.4 Documentation](https://docs.julialang.org/en/v1/)
- [Julia learning resources](https://julialang.org/learning/)

#### D

- **D** is a general-purpose programming language with static typing, systems-level access, and C-like syntax. With the D Programming Language, write fast, read fast, and run fast.
- The D Programming Language by Andrei Alexandrescu

### Ranking

**Programming Languages Ranking**

- [TIOBE](https://www.tiobe.com/tiobe-index/)
- [Programming-Language-Benchmarks-Visualization](https://github.com/GoodManWEN/Programming-Language-Benchmarks-Visualization)
- [The Computer Language Benchmarks Game](https://benchmarksgame-team.pages.debian.net/benchmarksgame/index.html)

Web Framework Ranking

- [Web Framework Benchmarks](https://www.techempower.com/benchmarks/)

**Project Ranking**

- [GitHub Ranking](https://evanli.github.io/Github-Ranking/)

**Programming Language of the Year (TIOBE)**

>The programming language that has the highest rise in ratings in a year.

| Year | Winner       | Description                                                                                                                                                                                                                                                                                                                                                     |
| ---- | ------------ | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| 2024 | Python       | 1. The explosion of artificial intelligence and large language models (**LLM**). 2. **Data science** and data engineering continue to grow.                                                                                                                                                                                                                     |
| 2023 | C#           | The .NET ecosystem continues to develop and its **cross-platform** capabilities are enhanced.                                                                                                                                                                                                                                                                   |
| 2022 | C++          | 1. C++20 and C++23 drive the **modernization** process and attract attention. 2. Game development and graphics programming still heavily rely on C++. 3. Fields such as financial engineering and high-frequency trading rely on C++. 4. Embedded systems and device drivers are still widely used. 5. The underlying layer of the AI toolchain is still C/C++. |
| 2021 | Python       | 1. The explosion of artificial intelligence (**AI**) and machine learning (**ML**). 2. **Data science** and data analysis widely use Python.                                                                                                                                                                                                                    |
| 2020 | Python       | 1. The explosion of artificial intelligence (**AI**) and machine learning (**ML**). 2. **Data science** and data analysis widely use Python.                                                                                                                                                                                                                    |
| 2019 | C            | The rapid growth of **embedded and IoT devices**.                                                                                                                                                                                                                                                                                                               |
| 2018 | Python       | 1. The explosion of artificial intelligence (**AI**) and machine learning (**ML**). 2. **Data science** and data analysis widely use Python.                                                                                                                                                                                                                    |
| 2017 | C            | The rapid growth of **embedded and IoT devices**.                                                                                                                                                                                                                                                                                                               |
| 2016 | Go           | 1. The wave of **cloud-native** is beginning to rise. 2. **Microservices architecture** is starting to become mainstream.                                                                                                                                                                                                                                       |
| 2015 | Java         | 1. The Mobile Internet Era. 2. **Android application** development mainly uses Java. 3. The main language for **enterprise-level backend development**.                                                                                                                                                                                                         |
| 2014 | JavaScript   | 1. MVVM frameworks: React, Angular and Vue. 2. Node.js. 3. npm. 4. Front-end engineering. Grunt and Webpack. 5. SPA. 6. Cross-platform application development with JS.                                                                                                                                                                                         |
| 2013 | Transact-SQL | 1. Widespread adoption of Microsoft SQL Server. 2. The demand for complex data processing and automation in enterprises is increasing. 3. The rise of **Business Intelligence (BI) and Data Warehousing**.                                                                                                                                                      |
| 2012 | Objective-C  | 1. The Mobile Internet Era. 2. iPhone 4 (2010) and iPhone 4S (2011) are big sellers. 3. App Store success.                                                                                                                                                                                                                                                      |
| 2011 | Objective-C  | 1. The Mobile Internet Era. 2. iPhone 4 (2010) and iPhone 4S (2011) are big sellers. 3. App Store success.                                                                                                                                                                                                                                                      |
| 2010 | Python       | 1. Simple and easy to learn, suitable for **rapid development**. 2. Scientific computing and data analytics at the start. 3. The **web development** ecosystem is rich. 4. **Automation and scripting** are widely used. 5. Adoption by large internet companies.                                                                                               |
| 2009 | Go           | 1. Google officially released Go in 2009. 2. **Google endorsement**, attracting attention.                                                                                                                                                                                                                                                                      |
| 2008 | C            | 1. The foundational language of operating systems and low-level software. 2. Embedded systems and hardware control are widely used.                                                                                                                                                                                                                             |
| 2007 | Python       | 1. Simple and easy to learn, suitable for **rapid development**. 2. Scientific computing and data analytics at the start. 3. **Web development** frameworks are growing rapidly. 4. **Automation and scripting** are widely used. 5. Adoption by large internet companies.                                                                                      |
| 2006 | Ruby         | 1. The rise of the **Ruby on Rails** framework. 2. Concise and elegant syntax design. 3. Suitable for startups and **rapid development**.                                                                                                                                                                                                                       |
| 2005 | Java         | 1. The main language for **enterprise-level application development**. 2. Stable and mature ecosystem and toolchain. 3. Support for mobile devices and embedded systems. 4. The widespread use of web application servers and middleware.                                                                                                                       |
| 2004 | PHP          | 1. The main programming language for **web application development**. 2. Many popular websites and content management systems (**CMS**) use PHP. 3. Open source, free, and cross-platform. 4. Rich extension libraries and frameworks 5. During the recovery period after the internet bubble, the number of websites grew rapidly.                             |
| 2003 | C++          | 1. Excellent performance, suitable for system-level development. 2. The main programming language in the field of game development.                                                                                                                                                                                                                             |

<br>

<h2><a name="nonturinglang_t" href="#nonturinglang_c">Non-Turing-Complete Languages</a></h2>

<br>

### SQL

"S-Q-L" /Àà…õs kjuÀê Àà…õl/ or "sequel" /ÀàsiÀêkw…ôl/

See [CS Fundamental Resources - Database Systems](/%23cs-foundations#dbms_t)

### Regular Expression

- Mastering Regular Expressions by Jeffrey Friedl
- Regular Expressions Cookbook by Jan Goyvaerts and Steven Levithan
- Regular Expression Pocket Reference: Regular Expressions for Perl, Ruby, PHP, Python, C, Java and .NET Book by Tony Stubblebine

Regex Examples

- [iHateRegex](https://ihateregex.io/)

Regex Tools

- https://regex101.com/

### XML

- [Namespaces in XML](https://www.w3.org/TR/xml-names/)

### HTML & CSS

See [Web Frontend Resources - HTML & CSS](../directions/web-frontend-resources.md#htmlcss_t)


### JSON

### YAML

<br>

### Markup Languages

<br>

####  <img src="/assets/icon/programming-languages/Markdown.svg" width="20px"/>Markdown

Markdown Editors

- [Typora](https://typora.io/)
- [Obsidian](https://obsidian.md/)
- [stackedit](https://github.com/benweet/stackedit). In-browser Markdown editor.

Libraries & Tools

- JavaScript
	- Parser
		- [markdown-it](https://github.com/markdown-it/markdown-it). Markdown parser done right. Fast and easy to extend. [Lib]
		- [marked](https://github.com/markedjs/marked). A markdown parser and compiler. Built for speed. [CLI, Lib]
		- [showdown](https://github.com/showdownjs/showdown). A bidirectional Markdown to HTML to Markdown converter written in Javascript. [CLI, Lib]
	- Extension
		- [markmap](https://github.com/markmap/markmap). Visualize your Markdown as mindmaps. [CLI, Lib]
		- [mermaid](https://github.com/mermaid-js/mermaid). Generate diagrams from markdown-like text. [Lib, Plugin]
	- Editor
		- [tui.editor](https://github.com/nhn/tui.editor). Markdown WYSIWYG Editor. GFM Standard + Chart & UML Extensible. [Lib]
		- [editor.md](https://github.com/pandao/editor.md). The open source embeddable online markdown editor (component). [Lib]
	- Component
		- [mdx](https://github.com/mdx-js/mdx). Markdown for the component era. [Lib]
		- [react-markdown](https://github.com/remarkjs/react-markdown). Markdown component for React. [Lib]
- [markitdown](https://github.com/microsoft/markitdown). (Python) Python tool for converting files and office documents to Markdown. [CLI, Lib]
- [pandoc](https://github.com/jgm/pandoc). (Haskell) Universal markup converter. [CLI]
- [glow](https://github.com/charmbracelet/glow). (Go) Render markdown on the CLI. [CLI]
- [mdBook](https://github.com/rust-lang/mdBook) (Rust). Create book from markdown files. Like Gitbook but implemented in Rust. [CLI]

Some More

- LaTex
- [Asciidoc](https://asciidoc.org/)
- KaTeX
- reStructuredText (rst, reST)
- Wikipedia Wikitext / Wikicode
- Creole
- Textile
- BBCode
- Pendown


<br>

<h2><a name="cpl_t" href="#cpl_c">Characteristics of Programming Languages</a></h2>

<br>

**1\. Compiled vs Interpreted**

Core difference: how code is converted into machine instructions and executed.

**Compiled Languages**: Translated entirely into machine code before execution. For example: C, C++, Rust, Go.

Pros:

- Faster execution (no translation during runtime)
- More optimized performance
- Early detection of syntax/type errors

Cons:

- Slower development cycle (compile before run)
- Harder to debug without symbols

**Interpreted Languages**: Executed line-by-line by an interpreter at runtime. For example: Python, Ruby, JavaScript, PHP.

Pros:

- Easier to debug
- More flexibility (can be modified at runtime)
- Faster prototyping

Cons:

- Slower execution
- Errors may only appear at runtime

**2\. Static Typing vs Dynamic Typing**

Core difference: Whether type checking occurs at compile time or runtime.

**Static Typing**: Variable types are known at compile time. For example: Java, C, C++, Rust, Go.

Pros:

- Type errors caught early
- Better IDE support and tooling
- More optimizations possible

Cons:

- More boilerplate code
- Less flexibility (need to declare types)

```java
// JavaÔºàStatic typeÔºâ
int x = 10;  // Type determined at compile time
x = "hello"; // Compilation error: Type mismatch
```

**Dynamic Typing**: Variable types are determined at runtime. For example: Python, JavaScript, Ruby, PHP.

Pros:

- Easier and faster to write
- More flexible (can reuse variables of different types)

Cons:

- Type errors appear only at runtime
- Can be harder to maintain and debug in large codebases

```python
# PythonÔºàDynamic typeÔºâ
x = 10      # Inferred at runtime as int
x = "hello" # Legal: types can change dynamically
```

**3\. Strong Typing vs Weak Typing**

Core difference: Whether type conversion requires explicit operation (strictness).

**Strong Typing**: Types are strictly enforced; implicit conversions are limited. For example: Python, Java, Ruby.

Pros:

- Prevents unexpected behavior
- Forces clear type conversions

Cons:

- May require more explicit code
- Less flexible for quick-and-dirty scripting

```python
# PythonÔºàStrong typeÔºâ
x = "1" + 1  # TypeErrorÔºöExplicit conversion required `int("1") + 1`
```

**Weak Typing**: Allows implicit type conversions more freely. For example: JavaScript, PHP, Perl.

Pros:

- Convenient for simple scripts
- Less code to write for certain tasks

Cons:

- Can lead to subtle, hard-to-detect bugs
- Type coercion may cause confusing behavior (e.g., `'' == 0` is `true` in JS)

```javascript
// JavaScriptÔºàWeak typeÔºâ
let x = "1" + 1; // Legal, the result is a string "11"ÔºàImplicit conversionÔºâ
let y = "1" - 1; // Legal, the result is the number 0.ÔºàImplicit conversionÔºâ
```

**Summary Table**

| Language            | Compiled / Interpreted                     | Static / Dynamic Typing   | Strong / Weak Typing |
| ------------------- | ------------------------------------------ | ------------------------- | -------------------- |
| C                   | Compiled                                   | Static                    | Weak                 |
| C++                 | Compiled                                   | Static                    | Weak                 |
| Rust                | Compiled                                   | Static                    | Strong               |
| Go                  | Compiled                                   | Static                    | Strong               |
| Java                | Compiled (to bytecode) + Interpreted (JIT) | Static                    | Strong               |
| Kotlin              | Same as Java (JVM Language)                | Static                    | Strong               |
| C#                  | Compiled + Interpreted                     | Static                    | Strong               |
| Python              | Interpreted                                | Dynamic                   | Strong               |
| Ruby                | Interpreted                                | Dynamic                   | Strong               |
| PHP                 | Interpreted                                | Dynamic                   | Weak                 |
| JavaScript          | Interpreted                                | Dynamic                   | Weak                 |
| Objective-C         | Compiled                                   | Static                    | Weak                 |
| Swift               | Compiled                                   | Static                    | Strong               |
| Perl                | Interpreted                                | Dynamic                   | Weak                 |
| Groovy              | Same as Java (JVM Language)                | Dynamic (optional static) | Strong               |
| Lua                 | Interpreted                                | Dynamic                   | Weak                 |
| Clojure             | Same as Java (JVM Language)                | Dynamic                   | Strong               |
| F#                  | Compiled (.NET)                            | Static                    | Strong               |
| Scala               | Same as Java (JVM Language)                | Static                    | Strong               |
| Erlang              | Compiled (BEAM VM)                         | Dynamic                   | Strong               |
| R                   | Interpreted                                | Dynamic                   | Weak                 |
| Visual Basic (.NET) | Compiled (to IL)                           | Static                    | Strong               |
| Lisp (Common Lisp)  | Interpreted / Compiled                     | Dynamic                   | Strong               |
| Haskell             | Compiled                                   | Static                    | Strong               |

<br>

<h2><a name="pgmprd_t" href="#pgmprd_c">Programming Paradigms</a></h2>

<br>

General

- Metaprogramming Ruby by Paolo Perrotta
- Concepts of Programming Languages by Robert W. Sebesta
- Seven More Languages in Seven Weeks by Bruce A. Tate, Ian Dees, Frederic Daoud
- ‰ª£Á†ÅÁöÑÊú™Êù• by [Êó•] ÊùæÊú¨Ë°åÂºò
- ÊùæÊú¨Ë°åÂºòÁöÑÁ®ãÂ∫è‰∏ñÁïå by [Êó•] ÊùæÊú¨Ë°åÂºò
- ÂÜíÂè∑ËØæÂ†ÇÔºöÁºñÁ®ãËåÉÂºè‰∏éOOPÊÄùÊÉ≥ by ÈÉëÊôñ
- ‰ª£Á†Å‰πãÈ´ì by [Êó•] Ë•øÂ∞æÊ≥∞Âíå

**Imperative programming / Procedural programming / structured programming**

>C (1972), Pascal (1970), Fortran (1957), BASIC (1964), Ada (1980), COBOL (1959)

>Structured programming consists of designing a set of procedures (or algorithms) to solve a problem.

>Algorithms come first, and data structures second.

**Object-Oriented Programming (OOP)**

> C++ (1985), C# (2000), Java (1995)

> Object-Oriented Programming (OOP) emerged as a response to the limitations of procedural programming and to address the growing complexity of software systems.

> OOP has become a dominant programming paradigm in software development because it helps to manage complexity, encourages good design practices, and facilitates collaboration among developers. As systems grew larger and more complex, the need for these benefits became more apparent, driving the adoption of OOP in both academic and commercial software development.

>Object-oriented programming is the opposite of procedural programming. OOP puts the data first, then looks at the algorithms to operate on the data.

>For small problems, the breakdown into procedures works very well. But objects are more appropriate for larger problems. Consider a simple web browser. It might require 2,000 procedures for its implementation, all of which manipulate a set of global data. In the object-oriented style, there might be 100 classes with an average of 20 methods per class. This structure is much easier for a programmer to grasp. It is also much easier to find bugs in.

>In a procedural program, you start the process at the top, with the main function. When designing an object-oriented system, there is no ‚Äútop,‚Äù and newcomers to OOP often wonder where to begin. The answer is: Identify your classes and then add methods to each class. A simple rule of thumb in identifying classes is to look for nouns in the problem analysis. Methods, on the other hand, correspond to verbs.

- Design Patterns: Elements of Reusable Object-Oriented Software by Erich Gamma, Ralph Johnson, John Vlissides, Richard Helm
- Object-Oriented Software Construction by Bertrand Meyer
- The Object-Oriented Thought Process (5th, 2019) by Matt Weisfeld
- Elegant Objects by Yegor Bugayenko
- Head First Object-Oriented Analysis and Design: A Brain Friendly Guide to OOA&D (2006) by Brett McLaughlin, Gary Pollice, David West
- Object-Oriented Analysis and Design with Applications by Grady Booch
- Object Design Style Guide: Powerful techniques for creating flexible, readable, and maintainable object-oriented code in any OO language, from Python to PHP (2020) by Matthias Noback
- OOP Concepts Booster : Take Your Coding Skills to the Next Level by Rakesh Singh
- Èù¢ÂêëÂØπË±°ÊòØÊÄéÊ†∑Â∑•‰ΩúÁöÑ by [Êó•]Âπ≥Ê≥ΩÁ´†

**Functional Programming (FP)**

> Haskell (2010), Scala (2004), Clojure (2007), F# (2005)

>While functional programming isn't universally applicable to all problems or scenarios, it provides powerful abstractions, promotes clarity of thought, and addresses many challenges faced by developers in the modern software landscape. As a result, many languages, such as JavaScript, Python, and even Java, have incorporated functional programming concepts alongside traditional paradigms.

- The Art of Functional Programming (2022) by Minh Quang Tran
- An Introduction to Functional Programming Through Lambda Calculus (2011) by Greg Michaelson
- Functional Design and Architecture: Examples in Haskell (2024) by Alexander Granin
- Functional Design: Principles, Patterns, and Practices (2023) by Robert Martin 
- Grokking Simplicity: Taming complex software with functional thinking (2021) by Eric Normand
- Grokking Functional Programming (2022) by Michal Plachta
- Introduction to Functional Programming by Richard S. Bird, Philip Wadler
- Real World Haskell by Bryan O'Sullivan, Don Stewart, and John Goerzen
- Thinking Functionally with Haskell by Richard S. Bird
- Programming in Haskell by Graham Hutton
- Functional Programming in Scala by Paul Chiusano and R√∫nar Bjarnason
- Functional Programming, Simplified  (Scala Edition) by Alvin Alexander
- Programming Clojure by Stuart Halloway, Susannah Davidson Pfalzer
- Functional Programming In Java: How Functional Techniques Improve Your Java Programs
  by Pierre-Yves Saumont
- Real-world Functional Programming: With Examples in F# and C# by Jon Skeet and Tomas Petricek
- Functional Programming in JavaScript by Luis Atencio

**Parallel Programming**

> Clojure (2007), Go (2012)

See [CS Fundamentals Resources - Parallel](../%23cs-foundations.md#parallel)

**Garbage Collection**

> Java (1995), C# (2000)

- The Garbage Collection Handbook: The Art of Automatic Memory Management by Antony Hosking, Eliot Moss, and Richard Jones
- Garbage collection by Richard Jones
- Java Performance Companion by Charlie Hunt, Poonam Bajaj, Bengt Rutisson, Monica Beckwith, John Cuthbertson
- Java Performance Tuning by Jack Shirazi
- ÂûÉÂúæÂõûÊî∂ÁöÑÁÆóÊ≥ï‰∏éÂÆûÁé∞ by ‰∏≠ÊùëÊàêÊ¥ã, Áõ∏Â∑ùÂÖâ 

**Virtual Machine**

> Lisp (1960), Smalltalk (1980), Pascal (1970), Java (1995)

**Distributed computing**

> Erlang (1998)

<br>

<h2><a name="mfp_t" href="#mfp_c">Metaphors for Programming</a></h2>

<br>

**Metaphor 1**

Six months ago I'd never written a single line of code in my life. I applied to the Coding House dev bootcamp, got accepted and will be graduating next month. I feel super confident about my programming skills now and pumped to put them to work.

Learning to code is like learning a foreign language. You start out with a few basic words and phrases. Then you learn some grammar. Then you learn more words and phrases. Then you learn some more grammar. Then you learn some colloquialisms and slang. Then you learn some more words and phrases. Then you learn some more grammar. Rinse and repeat forever (because "fluency" is a nebulous concept).

When you learn to code, it's the exact same thing. You're learning the language to communicate with technology. Unfortunately, your computer is generally less forgiving than the locals. When you don't know how to ask for another drink at the bar, you can usually get by with "biru" in your funny foreigner accent and one finger held up in the air. When you throw some imperfect code at your machine, though, it'll throw an error in your face at best, or just stare condescendingly at you until you find your mistake (an hour later) and fix it.

When you learn to code, like when you learn a foreign language, you have to adapt your way of thinking to this new environment of communication. In Japanese, the verb comes last, so you start to put more thought into receiver of the action in your communication. In Javascript, the code executes logically, in order, line by line from the top, so you also have to think logically, in order, step by step through your code. And of course, there are always exceptions to the rules (async operations woo!).

Probably the most important parallel, though, is the persistence required to get good at a foreign language, or at coding. You're going to fail. A lot. Then you're going to get a little better. Then you're going to fail even more. You have to accept this constant state of not knowing and the possibility of failure if you want to improve. Eventually you'll look back and realize that you're having a conversation with that bartender now and getting her number. Eventually you'll realize you can spin up a server, design a website or make an app, despite how much you thought you sucked at all this and probably should've just given up a long time ago.

So dive in and get your hands dirty! Break your machine, then learn how to put it all back together again. The journey of a thousand miles and all that jazz.

by [Patrick Shaughnessy](https://qr.ae/pKNpiv)

**2. How to explain coding concepts like streams, promises, linting, and declarative programming to a 5-year-old**

I love thinking about coding concepts by comparing them to familiar things we know in life. There are so many analogies out there about coding concepts. Some of them are good while others are confusing, mainly because they focus on partial aspects of a concept while ignoring many others. This article will summarize some of the analogies that I think best fit a few coding concepts in complete ways.

I will start with simple concepts and move on to harder ones. Let‚Äôs start with coding itself. Coding can be compared to writing cooking recipes. A recipe in this analogy is the program and the cook is the computer. A recipe is a list of instructions for a cook to follow and a program is a list of instructions for a computer to execute.

This is a very simple analogy given that a recipe is written in a human language and a program is written in a computer language and those are very different languages (unless your recipes have closures and promises!). There are also not a lot of unexpected things to plan for in a recipe while a computer program will have many. Regardless of its simplicity, it is a good way to show how a computer carries out a list of instructions sequentially. It also shows where one instruction line can use any result from executing prior instruction lines.

Some recipes will even have if-statements: if cooking for 2, 4 or 8! Some recipes will have loops: keep beating that mix until‚Ä¶

I also like this analogy because of all the ready items and tools that you can use in your recipes ‚Äî like the cake mix that you can use to make cupcakes and that specially-shaped pan that makes it so much easier to create cupcakes.

The use of ready items and tools is like including and using a package of code written by others in your own code.

```
// The making of a cupcake// First steps:
```

```
$ npm install cake-mix $ npm install cupcake-pan
```

NPM is the package manager for Node.js, which a very popular framework for writing JavaScript applications. In this analogy, Node.js is like the kitchen itself. It allows you to execute lines in your recipes by using built-in modules like your oven and sink.

Speaking of unhealthy food, this next analogy is for learning how to code and is compared to eating habits. I particularly LOVE this analogy and what it conveys because it helps me to stay on track in my code learning journey. For me, this began in high school and will continue until my brain reaches its last instruction: die();

by [Samer Buna](https://www.freecodecamp.org/news/hard-coding-concepts-explained-with-simple-real-life-analogies-280635e98e37)

<br>

<h2><a name="mfpl_t" href="#mfpl_c">Metaphors for Programming Languages</a></h2>

<br>

**1. Think of Programming Languages as Workshops**

Python, all the latest power tools, including a few that might not work perfectly, but they're new and nothing is going to cut your hand off or give you tetanus.

C/C++, this is grandpa's barn. All the tools are there, somewhere, but watch out for the black widows and rusted nails sticking up. Oh yeah, everything is hand powered, even the drill and metal lathe.

Rust, the above minus all the old, broken and dirty cruft. Very useful when the power goes out.

FORTRAN, the ultimate high power assembly line. Great for crunching numbers. Heaven help you if you want to do anything else.

Haskell, every CNC machine ever made, clean, works great, totally dust, dirt and grime free. No manuals or displays, however. Those would create side effects.

Erlang, all kinds of little workers in cubicles only able to do one job each. Lots of fun watching stuff being shuttled through old style vacuum transportation tubes.

LISP, a furnace, anvil, crucible, ingot mold, hammer, tongs, pile of coal and pile of scrap metal. Make your own bleeding tools!

Assembly, a hole in the ground containing ore. Get digging, after you make a shovel, of course.

This is actually a lot of fun to do and really points out weaknesses and strengths of different languages.

by [Andrew Olson](https://qr.ae/pKNpgP)

## References

[1] [The Definitive C++ Book Guide and List](https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list)
 