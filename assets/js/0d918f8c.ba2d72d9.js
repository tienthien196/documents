"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7452],{5134:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>s});const r=JSON.parse('{"id":"GDdocs/net/package","title":"package","description":"","source":"@site/docs/GDdocs/net/package.md","sourceDirName":"GDdocs/net","slug":"/GDdocs/net/package","permalink":"/ecosys.documents/docs/GDdocs/net/package","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"ip","permalink":"/ecosys.documents/docs/GDdocs/net/ip"},"next":{"title":"tcp","permalink":"/ecosys.documents/docs/GDdocs/net/tcp"}}');var c=n(4848),a=n(8453);const o={},i=void 0,p={},s=[];function d(t){const e={code:"code",pre:"pre",...(0,a.R)(),...t.components};return(0,c.jsx)(e.pre,{children:(0,c.jsx)(e.code,{children:"+----------------------------------------------------------------------------------------------------------------------------------------+\r\n|                                          GODOT STREAM & PACKET CHEATSHEET (v3.6 / v4.5)                                                |\r\n|                                Ghi/\u0111\u1ecdc d\u1eef li\u1ec7u, TCP/UDP, SSL/DTLS, Multicast \u2013 M\u1ea1ng n\xe2ng cao                                           |\r\n+----------------------------------------------------------------------------------------------------------------------------------------+\r\n| [STREAMPEERBUFFER - DATA] GHI/\u0110\u1eccC D\u1eee LI\u1ec6U   | [STREAMPEER - TCP/SSL] K\u1ebeT N\u1ed0I C\xd3 H\u01af\u1edaNG                  | [PACKETPEER - UDP] G\u1eecI NH\u1eacN PACKET |\r\n|--------------------------------------------|--------------------------------------------------------|-----------------------------------|\r\n| StreamPeerBuffer.new()       \u2192 t\u1ea1o m\u1edbi     | tcp.connect_to_host(ip, port) \u2192 k\u1ebft n\u1ed1i                | udp_peer.put_packet(data) \u2192 g\u1eedi   |\r\n| peer.put_8()/get_8()         \u2192 int 8-bit   | tcp.is_connected_to_host() \u2192 \u0111\xe3 k\u1ebft n\u1ed1i?              | udp_peer.get_packet() \u2192 nh\u1eadn      |\r\n| peer.put_u16()/get_u16()     \u2192 uint 16-bit | tcp.get_connected_host() \u2192 IP \u0111\xe3 k\u1ebft n\u1ed1i              | udp_peer.put_var(data) \u2192 g\u1eedi Variant|\r\n| peer.put_float()/get_float() \u2192 float 32   | tcp.get_connected_port() \u2192 c\u1ed5ng                       | udp_peer.get_var() \u2192 nh\u1eadn Variant |\r\n| peer.put_double()/get_double()\u2192 float 64  | tcp.set_no_delay(true) \u2192 t\u1eaft Nagle (g\u1eedi ngay)         | udp_peer.get_available_packet_count()|\r\n| peer.put_string()/get_string()\u2192 ASCII     | ssl.connect_to_stream(tcp, verify, host) \u2192 m\xe3 h\xf3a     |  \u2192 s\u1ed1 packet ch\u1edd                  |\r\n| peer.put_utf8_string()       \u2192 UTF-8      | ssl.poll() \u2192 c\u1eadp nh\u1eadt tr\u1ea1ng th\xe1i SSL                  | udp_peer.get_packet_ip() \u2192 IP ngu\u1ed3n|\r\n| peer.put_data(data)          \u2192 m\u1ea3ng byte  | ssl.get_packet_error() \u2192 ki\u1ec3m tra l\u1ed7i                | udp_peer.get_packet_port() \u2192 c\u1ed5ng |\r\n| peer.put_var(data)           \u2192 Variant    |                                                        |                                   |\r\n+--------------------------------------------+--------------------------------------------------------+-----------------------------------+\r\n| [DTLS - UDP ENCRYPTED] B\u1ea2O M\u1eacT UDP         | [MULTICAST/BROADCAST] PH\xc1T T\u1edaI NHI\u1ec0U                  | [BUFFER & CONFIG] C\u1ea4U H\xccNH         |\r\n|--------------------------------------------|--------------------------------------------------------|-----------------------------------|\r\n| dtls.connect_to_peer(udp)  \u2192 client       | udp_peer.join_multicast_group(addr, iface) \u2192 tham gia| peer.big_endian = true \u2192 Big Endian|\r\n| dtls.take_connection(udp)  \u2192 server        | udp_peer.leave_multicast_group(addr, iface) \u2192 r\u1eddi    | peer.seek(0) \u2192 v\u1ec1 \u0111\u1ea7u buffer      |\r\n| dtls.poll()                \u2192 c\u1eadp nh\u1eadt     | udp_peer.set_broadcast_enabled(true) \u2192 b\u1eadt broadcast | peer.resize(n) \u2192 \u0111\u1ed5i k\xedch th\u01b0\u1edbc   |\r\n| dtls.put_packet(data)      \u2192 g\u1eedi          | udp_peer.set_dest_address(mcast_ip, port) \u2192 multicast| peer.clear() \u2192 x\xf3a d\u1eef li\u1ec7u        |\r\n| dtls.get_packet()          \u2192 nh\u1eadn         |                                                        | peer.data_array = bytes \u2192 g\xe1n tr\u1ef1c ti\u1ebfp|\r\n| dtls.get_status()          \u2192 tr\u1ea1ng th\xe1i   |                                                        | peer.get_position() / get_size()  |\r\n+--------------------------------------------+--------------------------------------------------------+-----------------------------------+\r\n| GHI CH\xda:                                                                                                                               |\r\n| \u2022 \ud83d\udd22 put_*/get_*: Lu\xf4n \u0111\u1ea3m b\u1ea3o th\u1ee9 t\u1ef1 ghi/\u0111\u1ecdc gi\u1ed1ng nhau \u2013 r\u1ea5t quan tr\u1ecdng khi giao ti\u1ebfp gi\u1eefa client/server.                               |\r\n| \u2022 \ud83d\udd10 SSL/DTLS c\u1ea7n ch\u1ee9ng ch\u1ec9 (X509Certificate) v\xe0 kh\xf3a (CryptoKey) \u2013 d\xf9ng verify=false ch\u1ec9 \u0111\u1ec3 test.                                       |\r\n| \u2022 \ud83d\udce1 Multicast (239.0.0.0/8) d\xf9ng \u0111\u1ec3 g\u1eedi d\u1eef li\u1ec7u \u0111\u1ebfn nhi\u1ec1u client \u2013 l\xfd t\u01b0\u1edfng cho game LAN ho\u1eb7c chat nh\xf3m.                               |\r\n| \u2022 \ud83d\udcfb Broadcast (255.255.255.255) g\u1eedi t\u1edbi m\u1ecdi thi\u1ebft b\u1ecb trong m\u1ea1ng \u2013 d\xf9ng \u0111\u1ec3 discover server.                                              |\r\n| \u2022 \ud83e\udde9 put_var()/get_var(): H\u1ed7 tr\u1ee3 m\u1ecdi ki\u1ec3u d\u1eef li\u1ec7u Godot \u2013 r\u1ea5t ti\u1ec7n nh\u01b0ng c\u1ea7n b\u1eadt allow_object_decoding() n\u1ebfu c\xf3 object.                  |\r\n| \u2022 \u23f1 Lu\xf4n g\u1ecdi poll() \u0111\u1ecbnh k\u1ef3: dtls.poll(), ssl.poll() \u2013 \u0111\u1ec3 c\u1eadp nh\u1eadt tr\u1ea1ng th\xe1i k\u1ebft n\u1ed1i.                                                  |\r\n| \u2022 \ud83d\udd04 wait() (blocking) kh\xf4ng d\xf9ng trong _process \u2013 ch\u1ec9 d\xf9ng khi ch\u1eafc ch\u1eafn kh\xf4ng g\xe2y gi\u1eadt.                                                |\r\n+----------------------------------------------------------------------------------------------------------------------------------------+\n"})})}function u(t={}){const{wrapper:e}={...(0,a.R)(),...t.components};return e?(0,c.jsx)(e,{...t,children:(0,c.jsx)(d,{...t})}):d(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>i});var r=n(6540);const c={},a=r.createContext(c);function o(t){const e=r.useContext(a);return r.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(c):t.components||c:o(t.components),r.createElement(a.Provider,{value:e},t.children)}}}]);