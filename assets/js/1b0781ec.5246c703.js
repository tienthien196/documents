"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2868],{5236:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>u});const t=JSON.parse('{"id":"Computer Fundamentals/Computer Architecture/ISA","title":"ISA","description":"","source":"@site/docs/00_Computer Fundamentals/Computer Architecture/ISA.md","sourceDirName":"00_Computer Fundamentals/Computer Architecture","slug":"/Computer Fundamentals/Computer Architecture/ISA","permalink":"/ecosys.documents/docs/Computer Fundamentals/Computer Architecture/ISA","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Core","permalink":"/ecosys.documents/docs/Computer Fundamentals/Computer Architecture/Core"},"next":{"title":"cheatsheet_arch","permalink":"/ecosys.documents/docs/Computer Fundamentals/Computer Architecture/cheatsheet_arch"}}');var o=r(4848),c=r(8453);const s={},i=void 0,a={},u=[];function d(n){const e={code:"code",pre:"pre",...(0,c.R)(),...n.components};return(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"+-------------------------------------------------------------+\r\n|               ISA - Instruction Set Architecture            |\r\n|   (Giao di\u1ec7n gi\u1eefa ph\u1ea7n m\u1ec1m v\xe0 ph\u1ea7n c\u1ee9ng)                    |\r\n+-------------------------------------------------------------+\r\n\r\n+----------------+     +---------------------+     +-------------+\r\n|                |     |                     |     |             |\r\n|  Assembly Code | --\x3e |   Machine Code      | --\x3e |  Microcode  |\r\n|  (ADD R1,R2,R3)|     |  (32-bit: 0x00234020)|    |  (Optional) |\r\n|                |     |                     |     |             |\r\n+----------------+     +----------+----------+     +-------------+\r\n                                  |\r\n                                  v\r\n           +--------------------------------------------------+\r\n           |               CPU EXECUTION FLOW                 |\r\n           +--------------------------------------------------+\r\n           | 1. FETCH: L\u1ea5y l\u1ec7nh t\u1eeb Memory \u2192 IR                |\r\n           |    [PC] \u2192 Address Bus \u2192 Memory \u2192 Data Bus \u2192 IR   |\r\n           |                                                  |\r\n           | 2. DECODE: Gi\u1ea3i m\xe3 l\u1ec7nh \u2192 x\xe1c \u0111\u1ecbnh:              |\r\n           |    - Lo\u1ea1i l\u1ec7nh (R-type, I-type, J-type)          |\r\n           |    - Thanh ghi ngu\u1ed3n (Rs, Rt), \u0111\xedch (Rd)         |\r\n           |    - Opcode & Function field                     |\r\n           |                                                  |\r\n           | 3. EXECUTE: ALU th\u1ef1c hi\u1ec7n ph\xe9p to\xe1n              |\r\n           |    V\xed d\u1ee5: R1 = R2 + R3                           |\r\n           |                                                  |\r\n           | 4. MEMORY ACCESS (n\u1ebfu c\u1ea7n):                      |\r\n           |    - LOAD: \u0110\u1ecdc d\u1eef li\u1ec7u t\u1eeb RAM                    |\r\n           |    - STORE: Ghi d\u1eef li\u1ec7u v\xe0o RAM                  |\r\n           |                                                  |\r\n           | 5. WRITE BACK: Ghi k\u1ebft qu\u1ea3 v\xe0o thanh ghi (Rd)    |\r\n           +--------------------------------------------------+\r\n\r\n+-----------------------------------------------------------------------+\r\n|                        ISA COMPONENTS                                 |\r\n+----------------------------+----------------------+---------------------+\r\n|   R-TYPE (Register)        |   I-TYPE (Immediate) |   J-TYPE (Jump)     |\r\n| Opcode | Rs | Rt | Rd |Sh|F| Opcode | Rs | Rt | Addr | Opcode | Target |\r\n| 6b     | 5b | 5b | 5b |5b|6b| 6b     | 5b | 5b | 16b  | 6b     | 26b   |\r\n+----------------------------+----------------------+---------------------+\r\n| EX: ADD R1,R2,R3           | EX: LW R1,4(R2)      | EX: J loop         |\r\n| (T\xednh to\xe1n gi\u1eefa thanh ghi) | (T\u1ea3i t\u1eeb b\u1ed9 nh\u1edb)      | (Nh\u1ea3y \u0111\u1ebfn nh\xe3n)    |\r\n+----------------------------+----------------------+---------------------+\r\n\r\n+------------------------+     +-------------------------+\r\n| Supported Data Types   |     | Addressing Modes        |\r\n| - Byte (8-bit)         |     | - Immediate: #5         |\r\n| - Halfword (16-bit)    |     | - Register: R1          |\r\n| - Word (32-bit)        |     | - Base + Offset: 4(R2)  |\r\n| - Single/Double Float  |     | - PC-relative: loop     |\r\n+------------------------+     +-------------------------+\r\n\r\n+-------------------------------------------------------------+\r\n| Key Features of ISA                                         |\r\n| - T\u1eadp l\u1ec7nh (ADD, SUB, LW, SW, BEQ, J, ...)                  |\r\n| - S\u1ed1 l\u01b0\u1ee3ng thanh ghi (R0\u2013R31)                               |\r\n| - \u0110\u1ecbnh d\u1ea1ng l\u1ec7nh (3 lo\u1ea1i ch\xednh)                            |\r\n| - C\xe1ch \u0111\u1ecbnh \u0111\u1ecba ch\u1ec9 (addressing modes)                      |\r\n| - H\u1ed7 tr\u1ee3 ng\u1eaft (interrupts) v\xe0 ngo\u1ea1i l\u1ec7 (exceptions)         |\r\n| - Giao di\u1ec7n ABI (Application Binary Interface)              |\r\n+-------------------------------------------------------------+\n"})})}function h(n={}){const{wrapper:e}={...(0,c.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>s,x:()=>i});var t=r(6540);const o={},c=t.createContext(o);function s(n){const e=t.useContext(c);return t.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),t.createElement(c.Provider,{value:e},n.children)}}}]);