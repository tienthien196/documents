"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[56],{1319:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>p});const r=JSON.parse('{"id":"GDdocs/net/tcp","title":"tcp","description":"","source":"@site/docs/GDdocs/net/tcp.md","sourceDirName":"GDdocs/net","slug":"/GDdocs/net/tcp","permalink":"/documents/docs/GDdocs/net/tcp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"package","permalink":"/documents/docs/GDdocs/net/package"},"next":{"title":"websk","permalink":"/documents/docs/GDdocs/net/websk"}}');var c=t(4848),i=t(8453);const s={},o=void 0,a={},p=[];function l(e){const n={code:"code",pre:"pre",...(0,i.R)(),...e.components};return(0,c.jsx)(n.pre,{children:(0,c.jsx)(n.code,{children:'+----------------------------------------------------------------------------------------------------------------------------------------+\r\n|                                          GODOT NETWORKING CHEATSHEET (v3.6 / v4.5)                                                    |\r\n|                               UPnP, UDP, TCP, DTLS, SSL \u2013 K\u1ebft n\u1ed1i, b\u1ea3o m\u1eadt v\xe0 truy\u1ec1n d\u1eef li\u1ec7u m\u1ea1ng                                      |\r\n+----------------------------------------------------------------------------------------------------------------------------------------+\r\n| [UPNP - PORT MAPPING] M\u1ede C\u1ed4NG T\u1ef0 \u0110\u1ed8NG     | [UDP - CONNECTIONLESS] G\u1eecI NH\u1eacN NHANH                    | [TCP - CONNECTION] K\u1ebeT N\u1ed0I \u1ed4N \u0110\u1ecaNH |\r\n|--------------------------------------------|--------------------------------------------------------|-----------------------------------|\r\n| UPNP.new()                   \u2192 t\u1ea1o m\u1edbi     | UDPServer.listen(port)     \u2192 server l\u1eafng nghe           | TCP_Server.listen(port) \u2192 server  |\r\n| upnp.discover()              \u2192 t\xecm router  | server.is_connection_available() \u2192 c\xf3 k\u1ebft n\u1ed1i?         | server.is_connection_available() \u2192 c\xf3 client?|\r\n| upnp.get_gateway()           \u2192 l\u1ea5y gateway | server.take_connection()   \u2192 nh\u1eadn client (PacketPeerUDP)| server.take_connection() \u2192 StreamPeerTCP|\r\n| upnp.query_external_address()\u2192 IP c\xf4ng c\u1ed9ng| peer.put_packet(data)      \u2192 g\u1eedi d\u1eef li\u1ec7u               | peer.put_utf8_string("msg") \u2192 g\u1eedi chu\u1ed7i|\r\n| upnp.add_port_mapping(p,0,n,"UDP")\u2192 m\u1edf c\u1ed5ng| peer.get_packet()          \u2192 nh\u1eadn d\u1eef li\u1ec7u              | peer.get_utf8_string() \u2192 nh\u1eadn chu\u1ed7i|\r\n| upnp.delete_port_mapping(p,"TCP")\u2192 \u0111\xf3ng c\u1ed5ng| udp.listen(port)           \u2192 client l\u1eafng nghe           | peer.get_u32() / put_u32() \u2192 s\u1ed1 nguy\xean|\r\n|                                            | udp.connect_to_host(ip,p)  \u2192 k\u1ebft n\u1ed1i \u0111\u1ebfn server         | peer.get_var() / put_var() \u2192 Variant|\r\n+--------------------------------------------+--------------------------------------------------------+-----------------------------------+\r\n| [DTLS - UDP + ENCRYPTION] B\u1ea2O M\u1eacT UDP      | [SSL - TCP + ENCRYPTION] B\u1ea2O M\u1eacT TCP                   | [UTILS] TI\u1ec6N \xcdCH M\u1ea0NG             |\r\n|--------------------------------------------|--------------------------------------------------------|-----------------------------------|\r\n| DTLSServer.setup(key, cert)  \u2192 setup server| StreamPeerSSL.new()        \u2192 t\u1ea1o SSL peer              | PacketPeerUDP.get_packet_ip()    |\r\n| dtls.take_connection(udp_peer)\u2192 nh\u1eadn client| ssl.connect_to_stream(tcp, false, "host") \u2192 client     |  \u2192 IP g\xf3i tin v\u1eeba nh\u1eadn           |\r\n| dtls.poll()                  \u2192 c\u1eadp nh\u1eadt tr\u1ea1ng th\xe1i| ssl.poll()            \u2192 c\u1eadp nh\u1eadt SSL               | PacketPeerUDP.get_packet_port()  |\r\n| dtls.put_packet(data)        \u2192 g\u1eedi d\u1eef li\u1ec7u | ssl.put_string("msg")      \u2192 g\u1eedi chu\u1ed7i                |  \u2192 c\u1ed5ng g\xf3i tin v\u1eeba nh\u1eadn         |\r\n| dtls.get_packet()            \u2192 nh\u1eadn d\u1eef li\u1ec7u| ssl.get_data(len)          \u2192 nh\u1eadn d\u1eef li\u1ec7u             | StreamPeer.get_available_bytes() |\r\n|                                            |                                                    |  \u2192 ki\u1ec3m tra d\u1eef li\u1ec7u kh\u1ea3 d\u1ee5ng     |\r\n|                                            |                                                    | OS.is_socket_connected()         |\r\n|                                            |                                                    |  \u2192 ki\u1ec3m tra socket c\xf2n k\u1ebft n\u1ed1i?  |\r\n+--------------------------------------------+--------------------------------------------------------+-----------------------------------+\r\n| GHI CH\xda:                                                                                                                               |\r\n| \u2022 \ud83d\udd0c UPnP gi\xfap t\u1ef1 \u0111\u1ed9ng m\u1edf c\u1ed5ng \u2013 c\u1ea7n ch\u1ea1y trong thread \u0111\u1ec3 kh\xf4ng l\xe0m gi\u1eadt game.                                                          |\r\n| \u2022 \ud83d\udce6 UDP nhanh nh\u01b0ng kh\xf4ng \u0111\u1ea3m b\u1ea3o \u2013 d\xf9ng cho game real-time (FPS, platformer).                                                         |\r\n| \u2022 \ud83d\udd17 TCP \u0111\u1ea3m b\u1ea3o th\u1ee9 t\u1ef1 v\xe0 \u0111\u1ed9 tin c\u1eady \u2013 d\xf9ng cho chat, turn-based, truy\u1ec1n file.                                                         |\r\n| \u2022 \ud83d\udd10 DTLS (tr\xean UDP) v\xe0 SSL/TLS (tr\xean TCP) d\xf9ng \u0111\u1ec3 m\xe3 h\xf3a \u2013 c\u1ea7n ch\u1ee9ng ch\u1ec9 (X509Certificate + CryptoKey).                                |\r\n| \u2022 \ud83e\udde9 put_var() / get_var() h\u1ed7 tr\u1ee3 m\u1ecdi ki\u1ec3u Godot \u2013 r\u1ea5t ti\u1ec7n \u0111\u1ec3 g\u1eedi d\u1eef li\u1ec7u ph\u1ee9c t\u1ea1p.                                                    |\r\n| \u2022 \u23f1 Lu\xf4n g\u1ecdi poll() \u0111\u1ecbnh k\u1ef3: server.poll(), dtls.poll(), ssl.poll() \u2013 \u0111\u1ec3 c\u1eadp nh\u1eadt tr\u1ea1ng th\xe1i.                                           |\r\n| \u2022 \ud83e\uddf9 D\u1ecdn d\u1eb9p k\u1ebft n\u1ed1i: d\xf9ng yield() + call_deferred() \u0111\u1ec3 tr\xe1nh l\u1ed7i khi x\xf3a node \u0111ang x\u1eed l\xfd m\u1ea1ng.                                          |\r\n+----------------------------------------------------------------------------------------------------------------------------------------+\n'})})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,c.jsx)(n,{...e,children:(0,c.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var r=t(6540);const c={},i=r.createContext(c);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);